name: Integration Testing, Nightly Build & Push to ECR

on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      event_type:
        description: 'Event that triggered this workflow'
  repository_dispatch:
    types: [rc_deploy]

permissions:
  contents: write
  packages: write
  checks: write
  pull-requests: write
  issues: write
  deployments: write

jobs:
  integration-test:
    if: ${{ false }} # Disable integration test for now for testing
    runs-on: ubuntu-latest
    outputs:
      test-passed: ${{ steps.integration_test.outputs.result }}
      instance_id: ${{ steps.launch_ec2.outputs.instance_id }}
      public_ip: ${{ steps.launch_ec2.outputs.public_ip }}
    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v4
        with:
          path: infra

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Set scripts executable
        run: chmod +x ${{ github.workspace }}/infra/scripts/*.sh
        shell: bash

      # Launch temporary EC2 instance
      - name: Launch Temporary EC2 Instance
        id: launch_ec2
        run: ${{ github.workspace }}/infra/scripts/launch_ec2.sh
        shell: bash

      - name: Save EC2 Key Pair
        run: |
          cat << EOF > ${{ github.workspace }}/infra/scripts/ec2-key.pem
          ${{ secrets.EC2_SSH_KEY }}
          EOF
          
          chmod 600 ${{ github.workspace }}/infra/scripts/ec2-key.pem
        shell: bash

      - name: Wait for SSH Access
        run: |
          until nc -zv ${{ steps.launch_ec2.outputs.public_ip }} 22; do
              echo "Waiting for SSH access..."
              sleep 10
          done

      - name: Add Host key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -H ${{ steps.launch_ec2.outputs.public_ip }} >> ~/.ssh/known_hosts
        shell: bash

      - name: Run Integration Test on EC2
        id: integration_test
        run: |
            scp -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                -o LogLevel=ERROR \
                -i "${{ github.workspace }}/infra/scripts/ec2-key.pem" \
                "${{ github.workspace }}/infra/scripts/run_integration_test.sh" \
                ec2-user@${{ steps.launch_ec2.outputs.public_ip }}:/home/ec2-user/

            ssh -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                -i "${{ github.workspace }}/infra/scripts/ec2-key.pem" \
                ec2-user@${{ steps.launch_ec2.outputs.public_ip }} <<EOF
            export DATABASE_URL=${DATABASE_URL}
            export FRONTEND_URL=${FRONTEND_URL}
            export FRONTEND_RC_URL=${FRONTEND_RC_URL}
            export MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            export MYSQL_DATABASE=${MYSQL_DATABASE}
            export NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
            export CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
            export NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
            export GROQ_API_KEY=${GROQ_API_KEY}
            chmod +x /home/ec2-user/run_integration_test.sh
            /home/ec2-user/run_integration_test.sh
            EOF
        shell: bash
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL_TEST }}
          FRONTEND_RC_URL: ${{ secrets.FRONTEND_RC_URL }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD_TEST }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE_TEST }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}

      - name: Terminate EC2 Instance
        if: always()
        run: ${{ github.workspace }}/infra/scripts/terminate_ec2.sh ${{ steps.launch_ec2.outputs.instance_id }}
        shell: bash

  build-and-push:
    runs-on: ubuntu-latest
    # needs: [integration-test]
    # if : ${{ needs.integration-test.outputs.test-passed == 'success' }}
    env:
      AWS_REGION: us-east-1
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
      NEXT_PUBLIC_ANALYTICS_URL: ${{ secrets.NEXT_PUBLIC_ANALYTICS_URL }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      FRONTEND_RC_URL: ${{ secrets.FRONTEND_RC_URL }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      GH_PAT_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
    outputs:
      frontend_repo_name: ${{ steps.build_frontend.outputs.frontend_repo_name }}
      backend_repo_name: ${{ steps.build_backend.outputs.backend_repo_name }}
      frontend_tag: ${{ steps.build_frontend.outputs.frontend_tag }}
      backend_tag: ${{ steps.build_backend.outputs.backend_tag }}
      rc_tag: ${{ steps.get_rc_tag.outputs.rc_tag }}
    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: Sahil1709/finance-manager
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          path: src

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          cd src/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          cd src/backend
          pytest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Get Latest RC Tag
        id: get_rc_tag
        run: |
          RC_TAG=$(curl -s https://api.github.com/repos/Sahil1709/finance-manager/releases | jq -r 'map(select(.tag_name | test("-rc"))) | .[0].tag_name')
          echo "Latest RC tag: ${RC_TAG}"
          if [ -n "$RC_TAG" ] && [ "$RC_TAG" != "null" ]; then
            echo "::set-output name=rc_tag::$RC_TAG"
          else
            echo "::set-output name=rc_tag::"
          fi
        shell: bash

      - name: Build & Push Frontend Image
        id: build_frontend
        run: |
          cd src/frontend
          cat <<EOF > .env.local
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
          EOF
          IMAGE_NAME="${{ secrets.ECR_REGISTRY }}/sahil1709/finance-manager-frontend"
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "Building frontend image: $IMAGE_NAME:latest, $IMAGE_NAME:$IMAGE_TAG, and $IMAGE_NAME:${{ steps.get_rc_tag.outputs.rc_tag }}"
          docker build --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
                       --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
                       --build-arg NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }} \
                       --build-arg NEXT_PUBLIC_ANALYTICS_URL=${{ secrets.NEXT_PUBLIC_ANALYTICS_URL }} \
                       --build-arg NEXT_PUBLIC_VERSION=${{ steps.get_rc_tag.outputs.rc_tag }} \
                       -t $IMAGE_NAME:latest -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:${{ steps.get_rc_tag.outputs.rc_tag }} .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:${{ steps.get_rc_tag.outputs.rc_tag }}
          echo "::set-output name=frontend_repo_name::$IMAGE_NAME"
          echo "::set-output name=frontend_tag::$IMAGE_TAG"
        shell: bash

      - name: Build & Push Backend Image
        id: build_backend
        run: |
          cd src/backend
          cat <<EOF > .env
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          FRONTEND_RC_URL=${{ secrets.FRONTEND_RC_URL }}
          EOF
          IMAGE_NAME="${{ secrets.ECR_REGISTRY }}/sahil1709/finance-manager-backend"
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "Building backend image: $IMAGE_NAME:latest, $IMAGE_NAME:$IMAGE_TAG, and $IMAGE_NAME:${{ steps.get_rc_tag.outputs.rc_tag }}"
          docker build --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
                       --build-arg FRONTEND_URL=${{ secrets.FRONTEND_URL }} \
                        --build-arg FRONTEND_RC_URL=${{ secrets.FRONTEND_RC_URL }} \
                        --build-arg FRONTEND_GREEN_URL=${{ secrets.FRONTEND_GREEN_URL }} \
                       -t $IMAGE_NAME:latest -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:${{ steps.get_rc_tag.outputs.rc_tag }} .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:${{ steps.get_rc_tag.outputs.rc_tag }}
          echo "::set-output name=backend_repo_name::$IMAGE_NAME"
          echo "::set-output name=backend_tag::$IMAGE_TAG"
        shell: bash

      - name: Build & Push Analytics Image
        run: |
          cd src/analytics_service
          IMAGE_NAME="${{ secrets.ECR_REGISTRY }}/sahil1709/finance-manager-analytics"
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "Building analytics image: $IMAGE_NAME:latest, $IMAGE_NAME:$IMAGE_TAG, and $IMAGE_NAME:${{ steps.get_rc_tag.outputs.rc_tag }}"
          docker build --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
                       --build-arg FRONTEND_URL=${{ secrets.FRONTEND_URL }} \
                       --build-arg FRONTEND_RC_URL=${{ secrets.FRONTEND_RC_URL }} \
                       --build-arg GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} \
                       --build-arg FRONTEND_GREEN_URL=${{ secrets.FRONTEND_GREEN_URL }} \
                       -t $IMAGE_NAME:latest -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:${{ steps.get_rc_tag.outputs.rc_tag }} .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:${{ steps.get_rc_tag.outputs.rc_tag }}
        shell: bash

      - name: Trigger QA Deploy
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: Sahil1709/finance-manager-infra
          event-type: qa_deploy
          client-payload: |
            {"tag":"${{ steps.push.outputs.IMAGE_TAG }}"}

  deploy-to-QA:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infra
        uses: actions/checkout@v4
        with: 
          path: infra

      - name: Configure AWS & kubectl
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - run: aws eks update-kubeconfig --name ${{ secrets.EKS_QA_CLUSTER }} --region us-east-1

      - name: Update Backend Images
        run: |
          ECR=${{ secrets.ECR_REGISTRY }}
          TAG=${{ steps.get_rc_tag.outputs.rc_tag }}
          kubectl set image deployment/finance-backend \
            backend=$ECR/sahil1709/finance-manager-backend:$TAG
          kubectl set image deployment/analytics-service \
            analytics=$ECR/sahil1709/finance-manager-analytics:$TAG
          kubectl rollout status deploy/analytics-service --timeout=120s
          kubectl rollout status deploy/finance-backend --timeout=120s

      - name: Promote New Version into Green
        run: |
          ECR=${{ secrets.ECR_REGISTRY }}
          TAG=${{ steps.get_rc_tag.outputs.rc_tag }}

          # 1) Roll out the new app into Green
          kubectl set image deployment/frontend-green \
            frontend=$ECR/sahil1709/finance-manager-frontend:$TAG \
            --record

          # 2) Wait for it to come up
          kubectl rollout status deployment/frontend-green --timeout=120s

      - name: Smoke-Test Green
        run: |
          echo "Visit: https://green.sahilgupta.studio to verify v$TAG"

      - name: Cutover Green → Blue
        run: |
          # point the main svc at Green
          kubectl patch svc finance-frontend-svc --type merge -p '
          {
            "spec": {
              "selector": {
                "app": "finance-frontend",
                "variant": "green"
              }
            }
          }'

      - name: Confirm Production
        run: |
          echo "Now https://sahilgupta.studio serves v$TAG (Green → New Blue)"


