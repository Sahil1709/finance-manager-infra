name: Integration Testing, Nightly Build & Push to ECR

on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  integration-test:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
    outputs:
      test-passed: ${{ steps.integration_test.outputs.result }}
      frontend_tag: ${{ steps.build_frontend.outputs.frontend_tag }}
      backend_tag: ${{ steps.build_backend.outputs.backend_tag }}
    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: Sahil1709/finance-manager
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Tests
        run: pytest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build & Push Frontend Image
        id: build_frontend
        run: |
          IMAGE_FRONTEND="${{ secrets.ECR_REGISTRY }}/finance-manager-frontend"
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "Building frontend image: $IMAGE_FRONTEND:latest and $IMAGE_FRONTEND:$IMAGE_TAG"
          docker build --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
                       --build-arg CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
                       --build-arg NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }} \
                       -t $IMAGE_FRONTEND:latest -t $IMAGE_FRONTEND:$IMAGE_TAG ./frontend
          docker push $IMAGE_FRONTEND:latest
          docker push $IMAGE_FRONTEND:$IMAGE_TAG
          echo "::set-output name=frontend_tag::$IMAGE_TAG"
        shell: bash

      - name: Build & Push Backend Image
        id: build_backend
        run: |
          IMAGE_BACKEND="${{ secrets.ECR_REGISTRY }}/finance-manager-backend"
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "Building backend image: $IMAGE_BACKEND:latest and $IMAGE_BACKEND:$IMAGE_TAG"
          docker build --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
                       --build-arg FRONTEND_URL=${{ secrets.FRONTEND_URL }} \
                       -t $IMAGE_BACKEND:latest -t $IMAGE_BACKEND:$IMAGE_TAG ./backend
          docker push $IMAGE_BACKEND:latest
          docker push $IMAGE_BACKEND:$IMAGE_TAG
          echo "::set-output name=backend_tag::$IMAGE_TAG"
        shell: bash

      # Launch temporary EC2 instance
      - name: Launch Temporary EC2 Instance
        id: launch_ec2
        run: ./scripts/launch_ec2.sh
        shell: bash

      # Run integration test on the EC2 instance
      - name: Run Integration Test on EC2
        id: integration_test
        run: ./scripts/run_integration_test.sh
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

      - name: Terminate EC2 Instance
        run: ./scripts/terminate_ec2.sh ${{ steps.launch_ec2.outputs.instance_id }}
        shell: bash

  cleanup:
    name: Cleanup ECR Images on Failure
    needs: integration-test
    if: ${{ needs.integration-test.outputs.test-passed != 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup ECR Images
        run: ./scripts/cleanup_ecr.sh ${{ needs.integration-test.outputs.frontend_tag }} ${{ needs.integration-test.outputs.backend_tag }}
        shell: bash

  build-and-push:
    needs: integration-test
    if: ${{ needs.integration-test.outputs.test-passed == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: Sahil1709/finance-manager
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Notify Success
        run: echo "Integration test passed. Images have been built and pushed to ECR."
